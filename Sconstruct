import os
import platform
from pathlib import Path

src = 'src\\'
build = 'build\\'

environ = os.environ
current_plt = platform.system()
config_plt = 'pc'
upper_config_plt = config_plt.upper()
gcc = ''

abs_path = Path('.').absolute()

platform_dict = {
    'pc': 'x86',
}

arch = platform_dict[config_plt]


def action_ld(target, source, env):
    source_str = ''
    for src in source:
        source_str += ' ' + str(src)
    cmd = f'ld -m i386pe -nostdlib -T src\\linker\\link.ld{source_str} -o {target[0]}'
    print(cmd)
    os.system(cmd)
    return None


ld_builder = Builder(
    action=action_ld,
    suffix='.b',
    src_suffix='.o',
)


def action_objcopy(target, source, env):
    cmd = f'objcopy -S -O binary {source[0]} {target[0]}'
    print(cmd)
    os.system(cmd)
    return None


objcopy_builder = Builder(
    action=action_objcopy,
    suffix='.bin',
    src_suffix='.b',
)


def action_copy(target, source, env):
    source_str = ''
    for src in source:
        source_str += '+' + str(src)
    source_str = source_str[1:]
    cmd = f'copy /B {source_str} {target[0]}'
    print(cmd)
    os.system(cmd)
    return None


copy_builder = Builder(
    action=action_copy,
    suffix='.sys',
)

# global env
nasm_env = Environment(ENV=environ,
                       AS='nasm',
                       ASFLAGS='-f bin',
                       SRC=abs_path / src,
                       BUILD=abs_path / build,
                       ROOT=abs_path)
gcc_env = Environment(
    ENV=environ,
    BUILDERS={
        'Ld': ld_builder,
        'Objcopy': objcopy_builder,
        'Copy': copy_builder,
    },
    CFLAGS=
    f'-Wall -m32 -I {src}libs\\include -g -nostdlib -nostdinc -std=c99 -std=gnu99 -D {upper_config_plt}',
    LINKFLAGS='-nostdlib',
    OBJCOPYFLAGS='-S -O binary',
    LINKLD=f'{src}linker\\link.ld',
    PLATFORM=config_plt,
    ARCH=arch,
    SRC=abs_path / src,
    BUILD=abs_path / build,
    ROOT=abs_path)

Export('nasm_env')
Export('gcc_env')
SConscript(dirs=[src])
