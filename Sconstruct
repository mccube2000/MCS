import os
import platform
from pathlib import Path

# config
src = 'src\\'
build = 'build\\'

environ = os.environ
# 'C:\\Users\\mccube\\User\\Code\\C\\os\\z_tool\\mingw\\bin'
# 'C:\\Users\\mccube\\Downloads\\w64devkit-1.16.0\\w64devkit\\bin'
environ[
    'PATH'] = 'C:\\Users\\mccube\\Downloads\\w64devkit-1.16.0\\w64devkit\\bin;C:\\Users\\mccube\\User\\Tools\\nasm;'
vhd = 'C:\\Users\\mccube\\VirtualBox_VMs\\MCS\\MCS.vhd'
current_plt = platform.system()
config_plt = 'pc'
upper_config_plt = config_plt.upper()
gcc = ''

abs_path = Path('.').absolute()

platform_dict = {
    'pc': 'x86',
}

arch = platform_dict[config_plt]


# builder
def action_ld(target, source, env):
    source_str = ''
    for src in source:
        source_str += ' ' + str(src)
    cmd = f'ld {env["LDFLAGS"]} -T {env["LD"]}{source_str} -o {target[0]}'
    print(cmd)
    os.system(cmd)
    return None


ld_builder = Builder(
    action=action_ld,
    suffix='.b',
    src_suffix='.o',
)


def action_objcopy(target, source, env):
    cmd = f'objcopy {env["OBJCOPYFLAGS"]} {source[0]} {target[0]}'
    print(cmd)
    os.system(cmd)


objcopy_builder = Builder(
    action=action_objcopy,
    suffix='.bin',
    src_suffix='.b',
)


def action_copy(target, source, env):
    source_str = ''
    for src in source:
        source_str += '+' + str(src)
    source_str = source_str[1:]
    cmd = f'copy /B {source_str} {target[0]}'
    print(cmd)
    os.system(cmd)

    cmd = f'dd if={build}boot\\x86\\boot.bin of={vhd} bs=512 count=1 conv=notrunc'
    print(cmd)
    os.system(cmd)
    cmd = f'dd if={build}kernel\\kernel.bin of={vhd} bs=512 count=100 seek=1 conv=notrunc'
    print(cmd)
    os.system(cmd)
    # cmd = 'C:\\Progra~1\\Oracle\\VirtualBox\\VirtualBoxVm.exe --startvm "MCS" --debug-command-line --start-paused'
    cmd = 'C:\\Progra~1\\Oracle\\VirtualBox\\VirtualBoxVm.exe --startvm "MCS" --debug-command-line'
    print(cmd)
    os.system(cmd)

copy_builder = Builder(
    action=action_copy,
    suffix='.sys',
)


def action_vhd(target, source, env):
    cmd = f'dd if={build}boot\\x86\\boot.bin of={vhd} bs=512 count=1 conv=notrunc'
    print(cmd)
    os.system(cmd)
    cmd = f'dd if={build}kernel\\kernel.bin of={vhd} bs=512 count=100 seek=1 conv=notrunc'
    print(cmd)
    os.system(cmd)


vhd_builder = Builder(
    action=action_vhd,
)

# global env
nasm_env = Environment(ENV=environ,
                       AS='nasm',
                       ASFLAGS='-f bin',
                       SRC=abs_path / src,
                       BUILD=abs_path / build,
                       ROOT=abs_path)
gcc_env = Environment(
    ENV=environ,
    BUILDERS={
        'Ld': ld_builder,
        'Objcopy': objcopy_builder,
        'Copy': copy_builder,
    },
    CFLAGS=f'-Wall -m32 -I {src}libs\\include -g -nostdlib -nostdinc -std=c99 -D {upper_config_plt}',
    LDFLAGS='-m i386pe -nostdlib',
    LD=f'{src}linker\\link.ld',
    OBJCOPYFLAGS='-S -O binary',
    PLATFORM=config_plt,
    ARCH=arch,
    SRC=abs_path / src,
    BUILD=abs_path / build,
    ROOT=abs_path)
Export('nasm_env')
Export('gcc_env')

# build src
SConscript(dirs=[src])

# vhd env
vhd_env = Environment(
    ENV=environ,
    BUILDERS={
        'Vhd': vhd_builder,
    },
)
vhd_env.Vhd()
