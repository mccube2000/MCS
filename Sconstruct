import os
import platform
from pathlib import Path

# config
src = 'src\\'
build = 'build\\'

environ = os.environ
# 'C:\\Users\\mccube\\User\\Code\\C\\os\\z_tool\\mingw\\bin'
# 'C:\\Users\\mccube\\Downloads\\w64devkit-1.16.0\\w64devkit\\bin'
environ[
    'PATH'] = 'C:\\Users\\mccube\\User\\Code\\C\\os\\z_tool\\mingw\\bin;C:\\Users\\mccube\\User\\Tools\\nasm;'
vhd = 'C:\\Users\\mccube\\VirtualBox_VMs\\MCS\\MCS.vhd'
current_plt = platform.system()
config_plt = 'pc'
upper_config_plt = config_plt.upper()
gcc = ''

abs_path = Path('.').absolute()

platform_dict = {
    'pc': 'x86',
}

arch = platform_dict[config_plt]


# builder
def action_ld(target, source, env):
    source_str = ''
    for src in source:
        source_str += ' ' + str(src)
    if target[0].name.split(".")[1] == 'obj':
        cmd = f'ld {env["LDFLAGS"]}{source_str} -o {target[0]}'
    else:
        cmd = f'ld {env["LDFLAGS"]} -T {env["LD"]}{source_str} -o {target[0]}'
    print(cmd)
    os.system(cmd)
    return None


ld_builder = Builder(
    action=action_ld,
    suffix='.b',
    src_suffix='.o',
)


def action_objcopy(target, source, env):
    cmd = f'objcopy {env["OBJCOPYFLAGS"]} {source[0]} {target[0]}'
    print(cmd)
    os.system(cmd)


objcopy_builder = Builder(
    action=action_objcopy,
    suffix='.bin',
    src_suffix='.obj',
)

# def action_copy(target, source, env):
#     source_str = ''
#     for src in source:
#         source_str += '+' + str(src)
#     source_str = source_str[1:]
#     cmd = f'copy /B {source_str} {target[0]}'
#     print(cmd)
#     os.system(cmd)

# copy_builder = Builder(
#     action=action_copy,
#     suffix='.sys',
# )

# global env
env = Environment(
    ENV=environ,
    AS='nasm',
    ASFLAGS='-f elf',
    BUILDERS={
        'Ld': ld_builder,
        'Objcopy': objcopy_builder,
        # 'Copy': copy_builder,
    },
    CFLAGS=f'-Wall -m32 -I {src}libs\\include -g -nostdlib -nostdinc -std=c99 -D {upper_config_plt}',
    LDFLAGS='-m i386pe -nostdlib',
    LD=f'{src}linker\\link.ld',
    OBJCOPYFLAGS='-S -O binary',
    PLATFORM=config_plt,
    ARCH=arch,
    SRC=abs_path / src,
    BUILD=abs_path / build,
    ROOT=abs_path)
Export('env')

# build src
src_script = SConscript(dirs=[src])

builder_script = SConscript(dirs=[f'{src}builder'])

Depends(builder_script, src_script)
